{"version":3,"sources":["Components/Feed/InputOption.jsx","Components/Feed/Post.jsx","Components/firebase.js","Components/Feed/Feed.jsx","Components/NavBar/HeaderOption.jsx","Components/NavBar/Header.jsx","Components/SideBar/SideBar.jsx","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["InputOption","Icon","title","color","className","style","Post","name","description","message","photoUrl","Avatar","ThumbUpAltOutlined","ChatOutlined","ShareOutlined","SendOutlined","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","Feed","useState","posts","setPosts","input","setInput","useEffect","collection","onSnapshot","snapshot","docs","map","doc","id","data","Create","value","onChange","e","target","type","onClick","event","preventDefault","add","timestamp","FieldValue","serverTimestamp","Image","Subscriptions","EventNote","CalendarViewDay","HeaderOption","avatar","src","Header","alt","Search","Home","SupervisorAccount","BusinessCenter","Chat","Notifications","SideBar","topic","App","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.640de0db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InputOption.scss\";\r\n\r\nfunction InputOption({ Icon, title, color }) {\r\n  return (\r\n    <div className=\"inputOption\">\r\n      <Icon style={{ color: color }} />\r\n      <h4>{title}</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputOption;\r\n","import React from \"react\";\r\nimport \"./Post.scss\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport {\r\n  ChatOutlined,\r\n  SendOutlined,\r\n  ShareOutlined,\r\n  ThumbUpAltOutlined,\r\n} from \"@material-ui/icons\";\r\nimport InputOption from \"./InputOption\";\r\n\r\nfunction Post({ name, description, message, photoUrl }) {\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post__header\">\r\n        <Avatar />\r\n        <div className=\"post__header__info\">\r\n          <h2>{name}</h2>\r\n          <p>{description}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"post__body\">\r\n        <p>{message}</p>\r\n      </div>\r\n\r\n      <div className=\"post__buttons\">\r\n        <InputOption Icon={ThumbUpAltOutlined} title=\"Like\" color=\"gray\" />\r\n        <InputOption Icon={ChatOutlined} title=\"Comment\" color=\"gray\" />\r\n        <InputOption Icon={ShareOutlined} title=\"Share\" color=\"gray\" />\r\n        <InputOption Icon={SendOutlined} title=\"Send\" color=\"gray\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCD1XancA6wFHr2vffWgIpoDOPWGmbZYjI\",\r\n    authDomain: \"linkedin-clone-d4e0c.firebaseapp.com\",\r\n    projectId: \"linkedin-clone-d4e0c\",\r\n    storageBucket: \"linkedin-clone-d4e0c.appspot.com\",\r\n    messagingSenderId: \"888409838274\",\r\n    appId: \"1:888409838274:web:2aa1d27da241297bdea15b\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig) // to connect\r\nconst db = firebaseApp.firestore() // to get the data \r\nconst auth = firebase.auth() // Get the Auth service for the default app\r\n\r\nexport { db, auth };","import React, { useState, useEffect } from \"react\";\r\nimport InputOption from \"./InputOption\";\r\nimport Post from \"./Post\";\r\nimport { db } from \"../firebase\";\r\nimport firebase from \"firebase\";\r\nimport {\r\n  CalendarViewDay,\r\n  Create,\r\n  EventNote,\r\n  Image,\r\n  Subscriptions,\r\n} from \"@material-ui/icons\";\r\nimport \"./Feed.scss\";\r\n\r\nfunction Feed() {\r\n  // Add Posts\r\n  const [posts, setPosts] = useState([]);\r\n  // to store the input\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // connect to db\r\n    db.collection(\"posts\").onSnapshot((snapshot) => {\r\n      setPosts(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      );\r\n    });\r\n  }, []);\r\n  const sendPost = (event) => {\r\n    // stop refresh the page when click enter (Send btn)\r\n    event.preventDefault();\r\n    // add post to firebase\r\n    db.collection(\"posts\").add({\r\n      name: \"Raed Fadhlaoui\",\r\n      description: \"this is a test\",\r\n      message: input,\r\n      photoUrl: \"\",\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(), // to change the time for each country\r\n    });\r\n    // clear the input after adding post\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <div className=\"feed\">\r\n      {/* Create Post Form */}\r\n      <div className=\"feed__inputContainer\">\r\n        {/* Input */}\r\n        <div className=\"feed__inputContainer__input\">\r\n          <Create />\r\n          <form>\r\n            <input\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              type=\"text\"\r\n            />\r\n            <button onClick={sendPost} type=\"submit\">\r\n              Send\r\n            </button>\r\n          </form>\r\n        </div>\r\n        {/* Input Option Photo, Video, Event... */}\r\n        <div className=\"feed__inputContainer__inputOptions\">\r\n          <InputOption Icon={Image} title=\"Photo\" color=\"#70B5F9\" />\r\n          <InputOption Icon={Subscriptions} title=\"Video\" color=\"#E7A33E\" />\r\n          <InputOption Icon={EventNote} title=\"Event\" color=\"#C0CBCD\" />\r\n          <InputOption\r\n            Icon={CalendarViewDay}\r\n            title=\"Write article\"\r\n            color=\"#7FC15E\"\r\n          />\r\n        </div>\r\n      </div>\r\n      {/*  Posts  */}\r\n      {posts.map(({ id, data: { name, description, message, photoUrl } }) => (\r\n        <Post\r\n          key={id}\r\n          name={name}\r\n          description={description}\r\n          message={message}\r\n          photoUrl={photoUrl}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./HeaderOption.scss\";\r\nfunction HeaderOption({ Icon, title, avatar }) {\r\n  return (\r\n    <div className=\"headerOption\">\r\n      {Icon && <Icon className=\"headerOption__icon\" />}\r\n      {avatar && <Avatar className=\"headerOption__icon\" src={avatar} />}\r\n      <h3 className=\"headerOption__title\">{title}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderOption;\r\n","import React from \"react\";\r\nimport {\r\n  BusinessCenter,\r\n  SupervisorAccount,\r\n  Home,\r\n  Search,\r\n  Chat,\r\n  Notifications,\r\n} from \"@material-ui/icons\";\r\nimport HeaderOption from \"./HeaderOption\";\r\nimport \"./Header.scss\";\r\n\r\n/**\r\n * Header Component is the navbar for our website, that containe Home, My Network ,Jobs.. buttons\r\n */\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__left\">\r\n        <img\r\n          src=\"https://www.flaticon.com/svg/static/icons/svg/174/174857.svg\"\r\n          alt=\"linkedIn-icon\"\r\n        />\r\n        <div className=\"header__left__search\">\r\n          <Search />\r\n          <input type=\"text\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"header__right\">\r\n        <HeaderOption Icon={Home} title=\"Home\" />\r\n        <HeaderOption Icon={SupervisorAccount} title=\"My Network\" />\r\n        <HeaderOption Icon={BusinessCenter} title=\"Jobs\" />\r\n        <HeaderOption Icon={Chat} title=\"Messaging\" />\r\n        <HeaderOption Icon={Notifications} title=\"Notification\" />\r\n        <HeaderOption\r\n          avatar=\"https://media-exp1.licdn.com/dms/image/C4D35AQHO-61aPlMFpA/profile-framedphoto-shrink_200_200/0/1614880986043?e=1615467600&v=beta&t=3Kt_tP236o2ah1mqIEEGT6UJSgVKsUAxPC_XEda8fPk\"\r\n          title=\"me\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport \"./SideBar.scss\";\r\n\r\nfunction SideBar() {\r\n  const recentItem = (topic) => (\r\n    <div className=\"recentItem\">\r\n      <span className=\"recentItem__hash\">#</span>\r\n      <p>{topic}</p>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <img\r\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTYv9X5jR4HKxJ9uPYEa6f52SCgxSwfumXyxQ&usqp=CAU\"\r\n          alt=\"me\"\r\n        />\r\n        <Avatar className=\"sidebar__top__avatar\" />\r\n        <h2>Raed Fadhlaoui</h2>\r\n        <h4>fadhlaouiraied@hotmail.com</h4>\r\n      </div>\r\n\r\n      <div className=\"sidebar__stats\">\r\n        <div className=\"sidebar__stats__stat\">\r\n          <p>Who viewed you</p>\r\n          <p className=\"sidebar__stats__stat__statNumber\">999</p>\r\n        </div>\r\n        <div className=\"sidebar__stats__stat\">\r\n          <p>Views on post</p>\r\n          <p className=\"sidebar__stats__stat__statNumber\">999</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__bottom\">\r\n        <p>Recent</p>\r\n        {recentItem(\"reactjs\")}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport Feed from \"./Components/Feed/Feed\";\r\nimport Header from \"./Components/NavBar/Header\";\r\nimport SideBar from \"./Components/SideBar/SideBar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      {/* App Body */}\r\n      <div className=\"app__body\">\r\n        <SideBar />\r\n        <Feed />\r\n        {/* Widgets  */}{\" \"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        value: 0,\r\n    },\r\n    reducers: {\r\n        increment: state => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.value += 1;\r\n        },\r\n        decrement: state => {\r\n            state.value -= 1;\r\n        },\r\n        incrementByAmount: (state, action) => {\r\n            state.value += action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n    setTimeout(() => {\r\n        dispatch(incrementByAmount(amount));\r\n    }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}